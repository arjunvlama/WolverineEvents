schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Blog {
  id: ID!
  name: String!
  posts(filter: ModelPostFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPostConnection
}

type Club {
  Description: String
  Open_Invite: Boolean!
  events(End_Time: AWSDateTime!, Start_Time: AWSDateTime!, description: String, id: ID!, location: String!): ModelEventConnection
  id: ID!
  name: String!
  users: [String!]
}

type Comment {
  content: String
  id: ID!
  post: Post
}

type Event {
  End_Time: AWSDateTime!
  Start_Time: AWSDateTime!
  description: String
  id: ID!
  location: String!
}

type ModelBlogConnection {
  items: [Blog]
  nextToken: String
}

type ModelClubConnection {
  items: [Club]
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
}

type ModelEventConnection {
  items: [Event]
}

type ModelPostConnection {
  items: [Post]
  nextToken: String
}

type Mutation {
  createBlog(input: CreateBlogInput!): Blog
  createComment(input: CreateCommentInput!): Comment
  createPost(input: CreatePostInput!): Post
  deleteBlog(input: DeleteBlogInput!): Blog
  deleteComment(input: DeleteCommentInput!): Comment
  deletePost(input: DeletePostInput!): Post
  updateBlog(input: UpdateBlogInput!): Blog
  updateComment(input: UpdateCommentInput!): Comment
  updatePost(input: UpdatePostInput!): Post
}

type Post {
  blog: Blog
  comments(filter: ModelCommentFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCommentConnection
  id: ID!
  title: String!
}

type Query {
  getBlog(id: ID!): Blog
  getComment(id: ID!): Comment
  getPost(id: ID!): Post
  listBlogs(filter: ModelBlogFilterInput, limit: Int, nextToken: String): ModelBlogConnection
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
}

type Subscription {
  onCreateBlog: Blog @aws_subscribe(mutations : ["createBlog"])
  onCreateComment: Comment @aws_subscribe(mutations : ["createComment"])
  onCreatePost: Post @aws_subscribe(mutations : ["createPost"])
  onDeleteBlog: Blog @aws_subscribe(mutations : ["deleteBlog"])
  onDeleteComment: Comment @aws_subscribe(mutations : ["deleteComment"])
  onDeletePost: Post @aws_subscribe(mutations : ["deletePost"])
  onUpdateBlog: Blog @aws_subscribe(mutations : ["updateBlog"])
  onUpdateComment: Comment @aws_subscribe(mutations : ["updateComment"])
  onUpdatePost: Post @aws_subscribe(mutations : ["updatePost"])
}

type User {
  clubs: [Club]
  password: String!
  username: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateBlogInput {
  id: ID
  name: String!
}

input CreateCommentInput {
  commentPostId: ID
  content: String
  id: ID
}

input CreatePostInput {
  id: ID
  postBlogId: ID
  title: String!
}

input DeleteBlogInput {
  id: ID
}

input DeleteCommentInput {
  id: ID
}

input DeletePostInput {
  id: ID
}

input ModelBlogFilterInput {
  and: [ModelBlogFilterInput]
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  not: ModelBlogFilterInput
  or: [ModelBlogFilterInput]
}

input ModelBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input ModelCommentFilterInput {
  and: [ModelCommentFilterInput]
  content: ModelStringFilterInput
  id: ModelIDFilterInput
  not: ModelCommentFilterInput
  or: [ModelCommentFilterInput]
}

input ModelFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input ModelIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input ModelIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input ModelPostFilterInput {
  and: [ModelPostFilterInput]
  id: ModelIDFilterInput
  not: ModelPostFilterInput
  or: [ModelPostFilterInput]
  title: ModelStringFilterInput
}

input ModelStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateBlogInput {
  id: ID!
  name: String
}

input UpdateCommentInput {
  commentPostId: ID
  content: String
  id: ID!
}

input UpdatePostInput {
  id: ID!
  postBlogId: ID
  title: String
}
