schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Blog {
  id: ID!
  name: String!
  posts(filter: ModelPostFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPostConnection
}

type Club {
  Description: String
  Open_Invite: Boolean!
  events(End_Time: AWSDateTime, Start_Time: AWSDateTime, description: String, id: ID, location: String): ModelEventConnection
  id: ID!
  name: String!
  users: [String!]
}

type ClubConnection {
  items: [Club]
  nextToken: String
}

type Comment {
  content: String
  id: ID!
  post: Post
}

type Event {
  End_Time: AWSDateTime!
  Start_Time: AWSDateTime!
  description: String
  id: ID!
  location: String!
}

type EventConnection {
  items: [Event]
  nextToken: String
}

type ModelBlogConnection {
  items: [Blog]
  nextToken: String
}

type ModelClubConnection {
  items: [Club]
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
}

type ModelEventConnection {
  items: [Event]
}

type ModelPostConnection {
  items: [Post]
  nextToken: String
}

type Mutation {
  createBlog(input: CreateBlogInput!): Blog
  createClub(input: CreateClubInput!): Club
  createComment(input: CreateCommentInput!): Comment
  createEvent(input: CreateEventInput!): Event
  createPost(input: CreatePostInput!): Post
  createUser(input: CreateUserInput!): User
  deleteBlog(input: DeleteBlogInput!): Blog
  deleteClub(input: DeleteClubInput!): Club
  deleteComment(input: DeleteCommentInput!): Comment
  deleteEvent(input: DeleteEventInput!): Event
  deletePost(input: DeletePostInput!): Post
  deleteUser(input: DeleteUserInput!): User
  updateBlog(input: UpdateBlogInput!): Blog
  updateClub(input: UpdateClubInput!): Club
  updateComment(input: UpdateCommentInput!): Comment
  updateEvent(input: UpdateEventInput!): Event
  updatePost(input: UpdatePostInput!): Post
  updateUser(input: UpdateUserInput!): User
}

type Post {
  blog: Blog
  comments(filter: ModelCommentFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCommentConnection
  id: ID!
  title: String!
}

type Query {
  getBlog(id: ID!): Blog
  getClub(id: ID!, name: String!): Club
  getComment(id: ID!): Comment
  getEvent(id: ID!): Event
  getPost(id: ID!): Post
  getUser(id: ID!): User
  listBlogs(filter: ModelBlogFilterInput, limit: Int, nextToken: String): ModelBlogConnection
  listClubs(filter: TableClubFilterInput, limit: Int, nextToken: String): ClubConnection
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  listEvents(filter: TableEventFilterInput, limit: Int, nextToken: String): EventConnection
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  listUsers(filter: TableUserFilterInput, limit: Int, nextToken: String): UserConnection
}

type Subscription {
  onCreateBlog: Blog @aws_subscribe(mutations : ["createBlog"])
  onCreateClub(Description: String, Open_Invite: Boolean, id: ID, name: String, users: [String!]): Club @aws_subscribe(mutations : ["createClub"])
  onCreateComment: Comment @aws_subscribe(mutations : ["createComment"])
  onCreateEvent(End_Time: AWSDateTime, Start_Time: AWSDateTime, description: String, id: ID, location: String): Event @aws_subscribe(mutations : ["createEvent"])
  onCreatePost: Post @aws_subscribe(mutations : ["createPost"])
  onCreateUser(id: ID, password: String, username: String): User @aws_subscribe(mutations : ["createUser"])
  onDeleteBlog: Blog @aws_subscribe(mutations : ["deleteBlog"])
  onDeleteClub(Description: String, Open_Invite: Boolean, id: ID, name: String, users: [String!]): Club @aws_subscribe(mutations : ["deleteClub"])
  onDeleteComment: Comment @aws_subscribe(mutations : ["deleteComment"])
  onDeleteEvent(End_Time: AWSDateTime, Start_Time: AWSDateTime, description: String, id: ID, location: String): Event @aws_subscribe(mutations : ["deleteEvent"])
  onDeletePost: Post @aws_subscribe(mutations : ["deletePost"])
  onDeleteUser(id: ID, password: String, username: String): User @aws_subscribe(mutations : ["deleteUser"])
  onUpdateBlog: Blog @aws_subscribe(mutations : ["updateBlog"])
  onUpdateClub(Description: String, Open_Invite: Boolean, id: ID, name: String, users: [String!]): Club @aws_subscribe(mutations : ["updateClub"])
  onUpdateComment: Comment @aws_subscribe(mutations : ["updateComment"])
  onUpdateEvent(End_Time: AWSDateTime, Start_Time: AWSDateTime, description: String, id: ID, location: String): Event @aws_subscribe(mutations : ["updateEvent"])
  onUpdatePost: Post @aws_subscribe(mutations : ["updatePost"])
  onUpdateUser(id: ID, password: String, username: String): User @aws_subscribe(mutations : ["updateUser"])
}

type User {
  clubs: [Club]
  id: ID!
  password: String!
  username: String!
}

type UserConnection {
  items: [User]
  nextToken: String
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateBlogInput {
  id: ID
  name: String!
}

input CreateClubInput {
  Description: String
  Open_Invite: Boolean!
  id: ID!
  name: String!
  users: [String!]
}

input CreateCommentInput {
  commentPostId: ID
  content: String
  id: ID
}

input CreateEventInput {
  End_Time: AWSDateTime!
  Start_Time: AWSDateTime!
  description: String
  location: String!
}

input CreatePostInput {
  id: ID
  postBlogId: ID
  title: String!
}

input CreateUserInput {
  password: String!
  username: String!
}

input DeleteBlogInput {
  id: ID
}

input DeleteClubInput {
  id: ID!
  name: String!
}

input DeleteCommentInput {
  id: ID
}

input DeleteEventInput {
  id: ID!
}

input DeletePostInput {
  id: ID
}

input DeleteUserInput {
  id: ID!
}

input ModelBlogFilterInput {
  and: [ModelBlogFilterInput]
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  not: ModelBlogFilterInput
  or: [ModelBlogFilterInput]
}

input ModelBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input ModelClubInput {
  Description: String
  Open_Invite: Boolean!
  id: ID!
  name: String!
  users: [String!]
}

input ModelCommentFilterInput {
  and: [ModelCommentFilterInput]
  content: ModelStringFilterInput
  id: ModelIDFilterInput
  not: ModelCommentFilterInput
  or: [ModelCommentFilterInput]
}

input ModelEventInput {
  End_Time: AWSDateTime!
  Start_Time: AWSDateTime!
  description: String
  id: ID!
  location: String!
}

input ModelFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input ModelIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input ModelIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input ModelPostFilterInput {
  and: [ModelPostFilterInput]
  id: ModelIDFilterInput
  not: ModelPostFilterInput
  or: [ModelPostFilterInput]
  title: ModelStringFilterInput
}

input ModelStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableClubFilterInput {
  Description: TableStringFilterInput
  Open_Invite: TableBooleanFilterInput
  id: TableIDFilterInput
  name: TableStringFilterInput
  users: TableStringFilterInput
}

input TableEventFilterInput {
  End_Time: TableStringFilterInput
  Start_Time: TableStringFilterInput
  description: TableStringFilterInput
  id: TableIDFilterInput
  location: TableStringFilterInput
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableUserFilterInput {
  id: TableIDFilterInput
  password: TableStringFilterInput
  username: TableStringFilterInput
}

input UpdateBlogInput {
  id: ID!
  name: String
}

input UpdateClubInput {
  Description: String
  Open_Invite: Boolean
  id: ID!
  name: String!
  users: [String!]
}

input UpdateCommentInput {
  commentPostId: ID
  content: String
  id: ID!
}

input UpdateEventInput {
  End_Time: AWSDateTime
  Start_Time: AWSDateTime
  description: String
  id: ID!
  location: String
}

input UpdatePostInput {
  id: ID!
  postBlogId: ID
  title: String
}

input UpdateUserInput {
  id: ID!
  password: String
  username: String
}
